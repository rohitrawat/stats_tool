function [AUC_curves, sens, spec, AUCval] = run_analysis(files, new_window_each_plot, save_plots_as_jpegs, positive_class)
% This script accepts processing results files generated by NuClass, and
% performs sensitivity, specificity, ROC curve, and AUC computation. The
% names of processing results are to be supplied in the 'files' variable,
% each row containing a filename. To enable plotting of all the ROC curves,
% 'new_window_each_plot' should be set to 1. To save the plots as JPEG
% files, 'save_plots_as_jpegs' should be set to 1. The JPEG file names will
% have the same name as the processing results file, but a JPEG extension.
% The variable positive class should be set to 1 or 2 (usual), to denote
% the positive class. The negative or control class is automatically
% determined to be the one not selected.
% This is the command line backend to the stats_tool utility.
% Author: Rohit Rawat (rohit.rawat@mavs.uta.edu)
% 06/19/2012
% http://www-ee.uta.edu/eeweb/ip/
% Image Processing and Neural Networks Lab, UT Arlington

% Default Settings:
if(nargin < 4)
    num_files = 7;
    files = repmat('MLPProcResult', [num_files 1]);
    files = strcat(files,num2str([1:num_files]'));
    files = strcat(files,'.txt');
    
    new_window_each_plot = 1;
    save_plots_as_jpegs = 1;
    positive_class = 2; % set this to the class for which sensitivity and specificity need to be calculated
end

negative_class = 3-positive_class; % Set this to the negative or control class. This only works for 2-class case.

% addpath('C:\MATLAB71\work\common_functions');

for i=1: size(files,1)    
    fname = char(files(i,:));
    [y correct_class observed_class] = read_processing_results(fname);
    
    class = stats(correct_class, observed_class, 2);
    fprintf('Filename: %s\n', fname);
    fprintf('Sensitivity: %f\n', class(positive_class).sensitivity);
    fprintf('Specificity: %f\n', class(positive_class).specificity);
    
    sens(i) = class(positive_class).sensitivity;
    spec(i) = class(positive_class).specificity;
    
    scores = y(:,positive_class)-y(:,negative_class);     % calculate a thresholdable output for pain

    [X,Y,T,AUC] = perfcurve(correct_class,scores,positive_class);
    
    if(new_window_each_plot)
        figure;
        h = plot(X,Y);
        xlabel('False positive rate'); ylabel('True positive rate');
        title('ROC for classification');
        if(save_plots_as_jpegs)
            saveas(h, regexprep(fname, 'txt', 'jpg'));
        end
    end
    
    fprintf('AUC: %f\n\n', AUC);
    
    AUC_curves.X{i} = X;
    AUC_curves.Y{i} = Y;
    
    AUCval(i) = AUC;
    
end
